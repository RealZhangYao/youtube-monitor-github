"""
Simplified email sender for GitHub Actions
"""

import logging
import smtplib
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime

logger = logging.getLogger(__name__)


class EmailSender:
    """Handles sending emails via Gmail SMTP."""
    
    def __init__(self, gmail_user: str, gmail_password: str):
        """Initialize email sender."""
        self.gmail_user = gmail_user
        self.gmail_password = gmail_password
        self.smtp_server = "smtp.gmail.com"
        self.smtp_port = 587
        # Mask email for logging
        masked_email = gmail_user[:3] + '***' if len(gmail_user) > 3 else '***'
        logger.info(f"Email sender initialized for {masked_email}")
    
    def send_video_notification(self, recipient: str, video_info: dict, summary: str) -> bool:
        """Send notification email about a new video."""
        try:
            message = self._create_message(recipient, video_info, summary)
            self._send_email(message)
            logger.info(f"Email sent successfully for video: {video_info.get('title')}")
            return True
        except Exception as e:
            logger.error(f"Failed to send email: {e}")
            return False
    
    def _create_message(self, recipient: str, video_info: dict, summary: str):
        """Create email message."""
        message = MIMEMultipart('alternative')
        
        subject = f"üé¨ New Video: {video_info.get('channel_title')} - {video_info.get('title')}"
        message['Subject'] = subject
        message['From'] = f"YouTube Monitor <{self.gmail_user}>"
        message['To'] = recipient
        
        # Create HTML content
        html = f"""
        <!DOCTYPE html>
        <html>
        <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
            <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
                <h2 style="color: #e62117;">üé¨ New Video Alert</h2>
                
                <div style="background-color: #f8f9fa; padding: 15px; border-radius: 8px; margin: 20px 0;">
                    <p><strong>Channel:</strong> {video_info.get('channel_title', 'Unknown')}</p>
                    <p><strong>Title:</strong> <a href="{video_info.get('url', '#')}" style="color: #1a73e8;">{video_info.get('title', 'Unknown')}</a></p>
                    <p><strong>Published:</strong> {video_info.get('published_at', 'Unknown')}</p>
                    <p><strong>Duration:</strong> {video_info.get('duration', 'Unknown')}</p>
                </div>
                
                <h3 style="color: #1a73e8;">üìù AI Summary</h3>
                <div style="background-color: #e3f2fd; padding: 15px; border-left: 4px solid #2196f3;">
                    {summary.replace(chr(10), '<br>')}
                </div>
                
                <hr style="margin: 30px 0;">
                <p style="font-size: 12px; color: #666; text-align: center;">
                    Generated by YouTube Monitor via GitHub Actions<br>
                    {datetime.now().strftime('%Y-%m-%d %H:%M UTC')}
                </p>
            </div>
        </body>
        </html>
        """
        
        # Create plain text version
        text = f"""
NEW VIDEO NOTIFICATION

Channel: {video_info.get('channel_title', 'Unknown')}
Title: {video_info.get('title', 'Unknown')}
URL: {video_info.get('url', 'No URL')}
Published: {video_info.get('published_at', 'Unknown')}
Duration: {video_info.get('duration', 'Unknown')}

AI SUMMARY:
{summary}

---
Generated by YouTube Monitor via GitHub Actions
"""
        
        # Attach parts
        part1 = MIMEText(text, 'plain')
        part2 = MIMEText(html, 'html')
        message.attach(part1)
        message.attach(part2)
        
        return message
    
    def _send_email(self, message):
        """Send email via Gmail SMTP."""
        context = ssl.create_default_context()
        
        with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
            server.starttls(context=context)
            # Ensure credentials are properly encoded
            user = self.gmail_user.encode('utf-8').decode('ascii', 'ignore')
            password = self.gmail_password.encode('utf-8').decode('ascii', 'ignore')
            server.login(user, password)
            server.send_message(message)
    
    def test_connection(self) -> bool:
        """Test Gmail SMTP connection."""
        try:
            context = ssl.create_default_context()
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls(context=context)
                # Ensure credentials are properly encoded
                user = self.gmail_user.encode('utf-8').decode('ascii', 'ignore')
                password = self.gmail_password.encode('utf-8').decode('ascii', 'ignore')
                server.login(user, password)
            logger.info("Gmail SMTP connection test successful")
            return True
        except Exception as e:
            logger.error(f"Gmail SMTP connection test failed: {e}")
            return False