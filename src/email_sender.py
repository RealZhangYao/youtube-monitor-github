"""
Simplified email sender for GitHub Actions
"""

import logging
import smtplib
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime

logger = logging.getLogger(__name__)


class EmailSender:
    """Handles sending emails via Gmail SMTP."""
    
    def __init__(self, gmail_user: str, gmail_password: str):
        """Initialize email sender."""
        self.gmail_user = gmail_user
        self.gmail_password = gmail_password
        self.smtp_server = "smtp.gmail.com"
        self.smtp_port = 587
        # Mask email for logging
        masked_email = gmail_user[:3] + '***' if len(gmail_user) > 3 else '***'
        logger.info(f"Email sender initialized for {masked_email}")
    
    def send_video_notification(self, recipient: str, video_info: dict, summary: str) -> bool:
        """Send notification email about a new video."""
        try:
            message = self._create_message(recipient, video_info, summary)
            self._send_email(message)
            logger.info(f"Email sent successfully for video: {video_info.get('title')}")
            return True
        except Exception as e:
            logger.error(f"Failed to send email: {e}")
            return False
    
    def _create_message(self, recipient: str, video_info: dict, summary: str):
        """Create email message."""
        message = MIMEMultipart('alternative')
        
        subject = f"🎬 New Video: {video_info.get('channel_title')} - {video_info.get('title')}"
        message['Subject'] = subject
        message['From'] = f"YouTube Monitor <{self.gmail_user}>"
        message['To'] = recipient
        
        # Create HTML content
        html = f"""
        <!DOCTYPE html>
        <html>
        <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
            <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
                <h2 style="color: #e62117;">🎬 New Video Alert</h2>
                
                <div style="background-color: #f8f9fa; padding: 15px; border-radius: 8px; margin: 20px 0;">
                    <p><strong>Channel:</strong> {video_info.get('channel_title', 'Unknown')}</p>
                    <p><strong>Title:</strong> <a href="{video_info.get('url', '#')}" style="color: #1a73e8;">{video_info.get('title', 'Unknown')}</a></p>
                    <p><strong>Published:</strong> {video_info.get('published_at', 'Unknown')}</p>
                    <p><strong>Duration:</strong> {video_info.get('duration', 'Unknown')}</p>
                </div>
                
                <h3 style="color: #1a73e8;">📝 AI Summary</h3>
                <div style="background-color: #e3f2fd; padding: 15px; border-left: 4px solid #2196f3;">
                    {summary.replace(chr(10), '<br>')}
                </div>
                
                <hr style="margin: 30px 0;">
                <p style="font-size: 12px; color: #666; text-align: center;">
                    Generated by YouTube Monitor via GitHub Actions<br>
                    {datetime.now().strftime('%Y-%m-%d %H:%M UTC')}
                </p>
            </div>
        </body>
        </html>
        """
        
        # Create plain text version
        text = f"""
NEW VIDEO NOTIFICATION

Channel: {video_info.get('channel_title', 'Unknown')}
Title: {video_info.get('title', 'Unknown')}
URL: {video_info.get('url', 'No URL')}
Published: {video_info.get('published_at', 'Unknown')}
Duration: {video_info.get('duration', 'Unknown')}

AI SUMMARY:
{summary}

---
Generated by YouTube Monitor via GitHub Actions
"""
        
        # Attach parts
        part1 = MIMEText(text, 'plain')
        part2 = MIMEText(html, 'html')
        message.attach(part1)
        message.attach(part2)
        
        return message
    
    def _send_email(self, message):
        """Send email via Gmail SMTP."""
        context = ssl.create_default_context()
        
        with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
            server.starttls(context=context)
            # Ensure credentials are properly encoded
            user = self.gmail_user.encode('utf-8').decode('ascii', 'ignore')
            password = self.gmail_password.encode('utf-8').decode('ascii', 'ignore')
            server.login(user, password)
            server.send_message(message)
    
    def send_summary_email(self, recipient_email: str, summary_data: dict) -> bool:
        """
        Send a summary email with monitoring results.
        
        Args:
            recipient_email: Email address to send to
            summary_data: Dictionary containing summary information
            
        Returns:
            True if email sent successfully, False otherwise
        """
        try:
            # Create message
            message = self._create_summary_message(
                recipient_email,
                summary_data
            )
            
            # Send email
            self._send_email(message)
            
            logger.info(f"Summary email sent to {recipient_email}")
            return True
            
        except Exception as e:
            logger.error(f"Failed to send summary email: {e}")
            return False
    
    def _create_summary_message(self, recipient_email: str, summary_data: dict):
        """Create summary email message."""
        message = MIMEMultipart('alternative')
        
        # Set headers
        message['Subject'] = f"YouTube监控汇总 - {summary_data['total_new_videos']}个新视频"
        message['From'] = self.gmail_user
        message['To'] = recipient_email
        
        # Create email body
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        text_content = f"""
YouTube频道监控汇总报告
========================
时间: {timestamp}

监控频道数: {summary_data['channels_processed']}
新视频总数: {summary_data['total_new_videos']}

"""
        
        html_content = f"""
<html>
<body style="font-family: Arial, sans-serif; background-color: #f5f5f5; padding: 20px;">
    <div style="max-width: 600px; margin: 0 auto; background-color: white; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); padding: 30px;">
        <h2 style="color: #FF0000; border-bottom: 2px solid #FF0000; padding-bottom: 10px;">
            YouTube频道监控汇总报告
        </h2>
        
        <div style="margin: 20px 0;">
            <p><strong>监控时间:</strong> {timestamp}</p>
            <p><strong>监控频道数:</strong> {summary_data['channels_processed']}</p>
            <p><strong>新视频总数:</strong> {summary_data['total_new_videos']}</p>
        </div>
"""
        
        # Add details for each channel
        for result in summary_data.get('results', []):
            channel_name = result.get('channel_name', result.get('channel_id', 'Unknown'))
            new_videos = result.get('new_videos_count', 0)
            
            text_content += f"\n频道: {channel_name}\n新视频数: {new_videos}\n"
            
            html_content += f"""
        <div style="margin: 20px 0; padding: 15px; background-color: #f9f9f9; border-radius: 5px;">
            <h3 style="color: #333; margin: 0 0 10px 0;">{channel_name}</h3>
            <p style="margin: 5px 0;"><strong>新视频数:</strong> {new_videos}</p>
"""
            
            if new_videos > 0 and 'processed_videos' in result:
                text_content += "新视频列表:\n"
                html_content += "<p style='margin-top: 10px;'><strong>新视频:</strong></p><ul style='margin: 5px 0;'>"
                
                for video in result['processed_videos']:
                    text_content += f"  - {video['title']}\n"
                    html_content += f"<li>{video['title']}</li>"
                    
                html_content += "</ul>"
                
            html_content += "</div>"
            
        # Complete HTML
        html_content += """
        <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #ddd; color: #666; font-size: 12px;">
            <p>这是自动生成的监控报告。即使没有新视频，系统也会发送此汇总邮件。</p>
        </div>
    </div>
</body>
</html>
"""
        
        # Attach parts
        message.attach(MIMEText(text_content, 'plain'))
        message.attach(MIMEText(html_content, 'html'))
        
        return message
    
    def test_connection(self) -> bool:
        """Test Gmail SMTP connection."""
        try:
            context = ssl.create_default_context()
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls(context=context)
                # Ensure credentials are properly encoded
                user = self.gmail_user.encode('utf-8').decode('ascii', 'ignore')
                password = self.gmail_password.encode('utf-8').decode('ascii', 'ignore')
                server.login(user, password)
            logger.info("Gmail SMTP connection test successful")
            return True
        except Exception as e:
            logger.error(f"Gmail SMTP connection test failed: {e}")
            return False